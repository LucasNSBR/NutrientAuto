// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using NutrientAuto.Community.Data.Context;
using NutrientAuto.Community.Domain.Aggregates.FoodAggregate;
using NutrientAuto.Community.Domain.Aggregates.FoodTableAggregate;
using NutrientAuto.Community.Domain.Aggregates.MeasureCategoryAggregate;

namespace NutrientAuto.Community.Data.Migrations
{
    [DbContext(typeof(CommunityDbContext))]
    [Migration("20190523041304_initial")]
    partial class initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.4-servicing-10062")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("NutrientAuto.Community.Domain.Aggregates.CommentAggregate.Comment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Body")
                        .IsRequired()
                        .HasMaxLength(150);

                    b.Property<DateTime>("DateCreated");

                    b.Property<Guid>("PostId");

                    b.Property<Guid?>("PostId1");

                    b.Property<Guid>("ProfileId");

                    b.Property<Guid?>("ReplyTo");

                    b.HasKey("Id");

                    b.HasIndex("PostId");

                    b.HasIndex("PostId1");

                    b.HasIndex("ProfileId");

                    b.HasIndex("ReplyTo");

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("NutrientAuto.Community.Domain.Aggregates.DietAggregate.Diet", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<Guid>("ProfileId");

                    b.Property<DateTime>("StartDate");

                    b.HasKey("Id");

                    b.HasIndex("ProfileId");

                    b.ToTable("Diets");
                });

            modelBuilder.Entity("NutrientAuto.Community.Domain.Aggregates.FoodAggregate.Food", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Description")
                        .HasMaxLength(250);

                    b.Property<Guid>("FoodTableId");

                    b.Property<int>("FoodType");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.HasIndex("FoodTableId");

                    b.ToTable("Foods");

                    b.HasDiscriminator<int>("FoodType").HasValue(0);
                });

            modelBuilder.Entity("NutrientAuto.Community.Domain.Aggregates.FoodTableAggregate.FoodTable", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(250);

                    b.Property<int>("FoodTableType");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("FoodTables");

                    b.HasDiscriminator<int>("FoodTableType").HasValue(0);
                });

            modelBuilder.Entity("NutrientAuto.Community.Domain.Aggregates.FriendshipRequestAggregate.FriendshipRequest", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("AcceptedDate");

                    b.Property<DateTime>("DateCreated");

                    b.Property<string>("RequestBody")
                        .HasMaxLength(250);

                    b.Property<Guid>("RequestedId");

                    b.Property<Guid>("RequesterId");

                    b.HasKey("Id");

                    b.HasIndex("RequestedId");

                    b.HasIndex("RequesterId");

                    b.ToTable("FriendshipRequests");
                });

            modelBuilder.Entity("NutrientAuto.Community.Domain.Aggregates.GoalAggregate.Goal", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("DateCreated");

                    b.Property<string>("Details")
                        .IsRequired()
                        .HasMaxLength(500);

                    b.Property<Guid>("ProfileId");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.HasIndex("ProfileId");

                    b.ToTable("Goals");
                });

            modelBuilder.Entity("NutrientAuto.Community.Domain.Aggregates.MealAggregate.Meal", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(250);

                    b.Property<Guid>("DietId");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<Guid>("ProfileId");

                    b.HasKey("Id");

                    b.HasIndex("DietId");

                    b.ToTable("Meals");
                });

            modelBuilder.Entity("NutrientAuto.Community.Domain.Aggregates.MeasureAggregate.Measure", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Details")
                        .IsRequired()
                        .HasMaxLength(250);

                    b.Property<DateTime>("MeasureDate");

                    b.Property<Guid>("ProfileId");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.HasIndex("ProfileId");

                    b.ToTable("Measures");
                });

            modelBuilder.Entity("NutrientAuto.Community.Domain.Aggregates.MeasureCategoryAggregate.MeasureCategory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(250);

                    b.Property<bool>("IsFavorite");

                    b.Property<int>("MeasureCategoryType");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("MeasureCategories");

                    b.HasDiscriminator<int>("MeasureCategoryType").HasValue(0);
                });

            modelBuilder.Entity("NutrientAuto.Community.Domain.Aggregates.PostAggregate.Post", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Body")
                        .IsRequired()
                        .HasMaxLength(250);

                    b.Property<DateTime>("DateCreated");

                    b.Property<int>("PostType");

                    b.Property<Guid>("ProfileId");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.HasIndex("ProfileId");

                    b.ToTable("Posts");

                    b.HasDiscriminator<int>("PostType").HasValue(0);
                });

            modelBuilder.Entity("NutrientAuto.Community.Domain.Aggregates.ProfileAggregate.Profile", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Bio")
                        .IsRequired()
                        .HasMaxLength(500);

                    b.Property<DateTime>("BirthDate");

                    b.Property<int>("Genre");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150);

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(30);

                    b.HasKey("Id");

                    b.ToTable("Profiles");
                });

            modelBuilder.Entity("NutrientAuto.Community.Domain.Aggregates.ReminderAggregate.Reminder", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("Active");

                    b.Property<string>("Details")
                        .IsRequired()
                        .HasMaxLength(250);

                    b.Property<Guid>("ProfileId");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.HasIndex("ProfileId");

                    b.ToTable("Reminders");
                });

            modelBuilder.Entity("NutrientAuto.Community.Domain.Aggregates.FoodAggregate.CustomFood", b =>
                {
                    b.HasBaseType("NutrientAuto.Community.Domain.Aggregates.FoodAggregate.Food");

                    b.Property<Guid>("ProfileId");

                    b.HasIndex("ProfileId");

                    b.HasDiscriminator().HasValue(1);
                });

            modelBuilder.Entity("NutrientAuto.Community.Domain.Aggregates.FoodTableAggregate.CustomFoodTable", b =>
                {
                    b.HasBaseType("NutrientAuto.Community.Domain.Aggregates.FoodTableAggregate.FoodTable");

                    b.Property<Guid>("ProfileId");

                    b.HasIndex("ProfileId");

                    b.HasDiscriminator().HasValue(1);
                });

            modelBuilder.Entity("NutrientAuto.Community.Domain.Aggregates.MeasureCategoryAggregate.CustomMeasureCategory", b =>
                {
                    b.HasBaseType("NutrientAuto.Community.Domain.Aggregates.MeasureCategoryAggregate.MeasureCategory");

                    b.Property<Guid>("ProfileId");

                    b.HasIndex("ProfileId");

                    b.HasDiscriminator().HasValue(1);
                });

            modelBuilder.Entity("NutrientAuto.Community.Domain.Aggregates.PostAggregate.Subtypes.DietRegisteredPost", b =>
                {
                    b.HasBaseType("NutrientAuto.Community.Domain.Aggregates.PostAggregate.Post");

                    b.HasDiscriminator().HasValue(5);
                });

            modelBuilder.Entity("NutrientAuto.Community.Domain.Aggregates.PostAggregate.Subtypes.GoalCompletedPost", b =>
                {
                    b.HasBaseType("NutrientAuto.Community.Domain.Aggregates.PostAggregate.Post");

                    b.HasDiscriminator().HasValue(3);
                });

            modelBuilder.Entity("NutrientAuto.Community.Domain.Aggregates.PostAggregate.Subtypes.GoalRegisteredPost", b =>
                {
                    b.HasBaseType("NutrientAuto.Community.Domain.Aggregates.PostAggregate.Post");

                    b.HasDiscriminator().HasValue(2);
                });

            modelBuilder.Entity("NutrientAuto.Community.Domain.Aggregates.PostAggregate.Subtypes.MeasureRegisteredPost", b =>
                {
                    b.HasBaseType("NutrientAuto.Community.Domain.Aggregates.PostAggregate.Post");

                    b.HasDiscriminator().HasValue(4);
                });

            modelBuilder.Entity("NutrientAuto.Community.Domain.Aggregates.PostAggregate.Subtypes.ProfileUpdatedPost", b =>
                {
                    b.HasBaseType("NutrientAuto.Community.Domain.Aggregates.PostAggregate.Post");

                    b.HasDiscriminator().HasValue(1);
                });

            modelBuilder.Entity("NutrientAuto.Community.Domain.Aggregates.CommentAggregate.Comment", b =>
                {
                    b.HasOne("NutrientAuto.Community.Domain.Aggregates.PostAggregate.Post")
                        .WithMany()
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("NutrientAuto.Community.Domain.Aggregates.PostAggregate.Post")
                        .WithMany("Comments")
                        .HasForeignKey("PostId1");

                    b.HasOne("NutrientAuto.Community.Domain.Aggregates.ProfileAggregate.Profile")
                        .WithMany()
                        .HasForeignKey("ProfileId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("NutrientAuto.Community.Domain.Aggregates.CommentAggregate.Comment")
                        .WithMany("Replies")
                        .HasForeignKey("ReplyTo");
                });

            modelBuilder.Entity("NutrientAuto.Community.Domain.Aggregates.DietAggregate.Diet", b =>
                {
                    b.HasOne("NutrientAuto.Community.Domain.Aggregates.ProfileAggregate.Profile")
                        .WithMany()
                        .HasForeignKey("ProfileId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.OwnsOne("NutrientAuto.Community.Domain.Aggregates.SeedWork.MacronutrientTable", "TotalMacronutrients", b1 =>
                        {
                            b1.Property<Guid>("DietId");

                            b1.Property<decimal>("Carbohydrate");

                            b1.Property<decimal>("Fat");

                            b1.Property<decimal>("Kcal");

                            b1.Property<decimal>("Kj");

                            b1.Property<decimal>("Protein");

                            b1.HasKey("DietId");

                            b1.ToTable("Diets");

                            b1.HasOne("NutrientAuto.Community.Domain.Aggregates.DietAggregate.Diet")
                                .WithOne("TotalMacronutrients")
                                .HasForeignKey("NutrientAuto.Community.Domain.Aggregates.SeedWork.MacronutrientTable", "DietId")
                                .OnDelete(DeleteBehavior.Cascade);
                        });
                });

            modelBuilder.Entity("NutrientAuto.Community.Domain.Aggregates.FoodAggregate.Food", b =>
                {
                    b.HasOne("NutrientAuto.Community.Domain.Aggregates.FoodTableAggregate.FoodTable")
                        .WithMany()
                        .HasForeignKey("FoodTableId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.OwnsOne("NutrientAuto.Community.Domain.Aggregates.SeedWork.MicronutrientTable", "Micronutrients", b1 =>
                        {
                            b1.Property<Guid>("FoodId");

                            b1.Property<decimal?>("Calcium");

                            b1.Property<decimal?>("Chromium");

                            b1.Property<decimal?>("Copper");

                            b1.Property<decimal?>("Magnesium");

                            b1.Property<decimal?>("Manganese");

                            b1.Property<decimal?>("Phosphorus");

                            b1.Property<decimal?>("Potassium");

                            b1.Property<decimal?>("Selenium");

                            b1.Property<decimal?>("Sodium");

                            b1.Property<decimal?>("VitaminB1");

                            b1.Property<decimal?>("VitaminB12");

                            b1.Property<decimal?>("VitaminB2");

                            b1.Property<decimal?>("VitaminB3");

                            b1.Property<decimal?>("VitaminB6");

                            b1.Property<decimal?>("VitaminC");

                            b1.Property<decimal?>("VitaminD3");

                            b1.Property<decimal?>("VitaminE");

                            b1.Property<decimal?>("Zinc");

                            b1.HasKey("FoodId");

                            b1.ToTable("Foods");

                            b1.HasOne("NutrientAuto.Community.Domain.Aggregates.FoodAggregate.Food")
                                .WithOne("Micronutrients")
                                .HasForeignKey("NutrientAuto.Community.Domain.Aggregates.SeedWork.MicronutrientTable", "FoodId")
                                .OnDelete(DeleteBehavior.Cascade);
                        });

                    b.OwnsOne("NutrientAuto.Community.Domain.Aggregates.FoodAggregate.FoodUnit", "FoodUnit", b1 =>
                        {
                            b1.Property<Guid>("FoodId");

                            b1.Property<decimal>("DefaultGramsQuantityMultiplier");

                            b1.Property<int>("UnitType");

                            b1.HasKey("FoodId");

                            b1.ToTable("Foods");

                            b1.HasOne("NutrientAuto.Community.Domain.Aggregates.FoodAggregate.Food")
                                .WithOne("FoodUnit")
                                .HasForeignKey("NutrientAuto.Community.Domain.Aggregates.FoodAggregate.FoodUnit", "FoodId")
                                .OnDelete(DeleteBehavior.Cascade);
                        });

                    b.OwnsOne("NutrientAuto.Community.Domain.Aggregates.SeedWork.MacronutrientTable", "Macronutrients", b1 =>
                        {
                            b1.Property<Guid>("FoodId");

                            b1.Property<decimal>("Carbohydrate");

                            b1.Property<decimal>("Fat");

                            b1.Property<decimal>("Kcal");

                            b1.Property<decimal>("Kj");

                            b1.Property<decimal>("Protein");

                            b1.HasKey("FoodId");

                            b1.ToTable("Foods");

                            b1.HasOne("NutrientAuto.Community.Domain.Aggregates.FoodAggregate.Food")
                                .WithOne("Macronutrients")
                                .HasForeignKey("NutrientAuto.Community.Domain.Aggregates.SeedWork.MacronutrientTable", "FoodId")
                                .OnDelete(DeleteBehavior.Cascade);
                        });
                });

            modelBuilder.Entity("NutrientAuto.Community.Domain.Aggregates.FriendshipRequestAggregate.FriendshipRequest", b =>
                {
                    b.HasOne("NutrientAuto.Community.Domain.Aggregates.ProfileAggregate.Profile")
                        .WithMany()
                        .HasForeignKey("RequestedId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("NutrientAuto.Community.Domain.Aggregates.ProfileAggregate.Profile")
                        .WithMany()
                        .HasForeignKey("RequesterId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("NutrientAuto.Community.Domain.Aggregates.GoalAggregate.Goal", b =>
                {
                    b.HasOne("NutrientAuto.Community.Domain.Aggregates.ProfileAggregate.Profile")
                        .WithMany()
                        .HasForeignKey("ProfileId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.OwnsOne("NutrientAuto.Community.Domain.Aggregates.GoalAggregate.GoalStatus", "Status", b1 =>
                        {
                            b1.Property<Guid>("GoalId");

                            b1.Property<string>("AccomplishmentDetails")
                                .HasColumnName("AccomplishmentDetails")
                                .HasMaxLength(500);

                            b1.Property<DateTime?>("DateCompleted")
                                .HasColumnName("DateCompleted");

                            b1.Property<bool>("IsCompleted")
                                .HasColumnName("IsCompleted");

                            b1.HasKey("GoalId");

                            b1.ToTable("Goals");

                            b1.HasOne("NutrientAuto.Community.Domain.Aggregates.GoalAggregate.Goal")
                                .WithOne("Status")
                                .HasForeignKey("NutrientAuto.Community.Domain.Aggregates.GoalAggregate.GoalStatus", "GoalId")
                                .OnDelete(DeleteBehavior.Cascade);
                        });
                });

            modelBuilder.Entity("NutrientAuto.Community.Domain.Aggregates.MealAggregate.Meal", b =>
                {
                    b.HasOne("NutrientAuto.Community.Domain.Aggregates.DietAggregate.Diet")
                        .WithMany("DietMeals")
                        .HasForeignKey("DietId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.OwnsMany("NutrientAuto.Community.Domain.Aggregates.MealAggregate.MealFood", "MealFoods", b1 =>
                        {
                            b1.Property<Guid>("Id")
                                .ValueGeneratedOnAdd();

                            b1.Property<string>("Description")
                                .IsRequired()
                                .HasMaxLength(250);

                            b1.Property<Guid>("FoodId");

                            b1.Property<Guid>("MealId");

                            b1.Property<string>("Name")
                                .IsRequired()
                                .HasMaxLength(100);

                            b1.Property<decimal>("Quantity");

                            b1.HasKey("Id");

                            b1.HasIndex("MealId");

                            b1.ToTable("MealFood");

                            b1.HasOne("NutrientAuto.Community.Domain.Aggregates.MealAggregate.Meal")
                                .WithMany("MealFoods")
                                .HasForeignKey("MealId")
                                .OnDelete(DeleteBehavior.Cascade);

                            b1.OwnsOne("NutrientAuto.Community.Domain.Aggregates.FoodAggregate.FoodUnit", "FoodUnit", b2 =>
                                {
                                    b2.Property<Guid>("MealFoodId");

                                    b2.Property<decimal>("DefaultGramsQuantityMultiplier");

                                    b2.Property<int>("UnitType");

                                    b2.HasKey("MealFoodId");

                                    b2.ToTable("MealFood");

                                    b2.HasOne("NutrientAuto.Community.Domain.Aggregates.MealAggregate.MealFood")
                                        .WithOne("FoodUnit")
                                        .HasForeignKey("NutrientAuto.Community.Domain.Aggregates.FoodAggregate.FoodUnit", "MealFoodId")
                                        .OnDelete(DeleteBehavior.Cascade);
                                });

                            b1.OwnsOne("NutrientAuto.Community.Domain.Aggregates.SeedWork.MacronutrientTable", "Macronutrients", b2 =>
                                {
                                    b2.Property<Guid>("MealFoodId");

                                    b2.Property<decimal>("Carbohydrate");

                                    b2.Property<decimal>("Fat");

                                    b2.Property<decimal>("Kcal");

                                    b2.Property<decimal>("Kj");

                                    b2.Property<decimal>("Protein");

                                    b2.HasKey("MealFoodId");

                                    b2.ToTable("MealFood");

                                    b2.HasOne("NutrientAuto.Community.Domain.Aggregates.MealAggregate.MealFood")
                                        .WithOne("Macronutrients")
                                        .HasForeignKey("NutrientAuto.Community.Domain.Aggregates.SeedWork.MacronutrientTable", "MealFoodId")
                                        .OnDelete(DeleteBehavior.Cascade);
                                });
                        });

                    b.OwnsOne("NutrientAuto.Community.Domain.Aggregates.SeedWork.MacronutrientTable", "MealMacronutrients", b1 =>
                        {
                            b1.Property<Guid>("MealId");

                            b1.Property<decimal>("Carbohydrate")
                                .HasColumnName("MealCarbohydrate");

                            b1.Property<decimal>("Fat")
                                .HasColumnName("MealFat");

                            b1.Property<decimal>("Kcal")
                                .HasColumnName("MealKcal");

                            b1.Property<decimal>("Kj")
                                .HasColumnName("MealKj");

                            b1.Property<decimal>("Protein")
                                .HasColumnName("MealProtein");

                            b1.HasKey("MealId");

                            b1.ToTable("Meals");

                            b1.HasOne("NutrientAuto.Community.Domain.Aggregates.MealAggregate.Meal")
                                .WithOne("MealMacronutrients")
                                .HasForeignKey("NutrientAuto.Community.Domain.Aggregates.SeedWork.MacronutrientTable", "MealId")
                                .OnDelete(DeleteBehavior.Cascade);
                        });

                    b.OwnsOne("NutrientAuto.Shared.ValueObjects.Time", "TimeOfDay", b1 =>
                        {
                            b1.Property<Guid>("MealId");

                            b1.Property<int>("Hour")
                                .HasColumnName("MealHour");

                            b1.Property<int>("Minute")
                                .HasColumnName("MealMinute");

                            b1.Property<int>("Second")
                                .HasColumnName("MealSecond");

                            b1.HasKey("MealId");

                            b1.ToTable("Meals");

                            b1.HasOne("NutrientAuto.Community.Domain.Aggregates.MealAggregate.Meal")
                                .WithOne("TimeOfDay")
                                .HasForeignKey("NutrientAuto.Shared.ValueObjects.Time", "MealId")
                                .OnDelete(DeleteBehavior.Cascade);
                        });
                });

            modelBuilder.Entity("NutrientAuto.Community.Domain.Aggregates.MeasureAggregate.Measure", b =>
                {
                    b.HasOne("NutrientAuto.Community.Domain.Aggregates.ProfileAggregate.Profile")
                        .WithMany()
                        .HasForeignKey("ProfileId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.OwnsOne("NutrientAuto.Community.Domain.Aggregates.MeasureAggregate.BasicMeasure", "BasicMeasure", b1 =>
                        {
                            b1.Property<Guid>("MeasureId");

                            b1.Property<decimal>("Bmi")
                                .HasColumnName("Bmi");

                            b1.Property<decimal>("Height")
                                .HasColumnName("Height");

                            b1.Property<decimal>("Weight")
                                .HasColumnName("Weight");

                            b1.HasKey("MeasureId");

                            b1.ToTable("Measures");

                            b1.HasOne("NutrientAuto.Community.Domain.Aggregates.MeasureAggregate.Measure")
                                .WithOne("BasicMeasure")
                                .HasForeignKey("NutrientAuto.Community.Domain.Aggregates.MeasureAggregate.BasicMeasure", "MeasureId")
                                .OnDelete(DeleteBehavior.Cascade);
                        });

                    b.OwnsMany("NutrientAuto.Community.Domain.Aggregates.MeasureAggregate.MeasureLine", "MeasureLines", b1 =>
                        {
                            b1.Property<Guid>("Id")
                                .ValueGeneratedOnAdd();

                            b1.Property<Guid>("MeasureCategoryId");

                            b1.Property<Guid>("MeasureId");

                            b1.Property<decimal>("Value");

                            b1.HasKey("Id");

                            b1.HasIndex("MeasureCategoryId");

                            b1.HasIndex("MeasureId");

                            b1.ToTable("MeasureLine");

                            b1.HasOne("NutrientAuto.Community.Domain.Aggregates.MeasureCategoryAggregate.MeasureCategory", "MeasureCategory")
                                .WithMany()
                                .HasForeignKey("MeasureCategoryId")
                                .OnDelete(DeleteBehavior.Cascade);

                            b1.HasOne("NutrientAuto.Community.Domain.Aggregates.MeasureAggregate.Measure")
                                .WithMany("MeasureLines")
                                .HasForeignKey("MeasureId")
                                .OnDelete(DeleteBehavior.Cascade);
                        });

                    b.OwnsMany("NutrientAuto.Shared.ValueObjects.Image", "BodyPictures", b1 =>
                        {
                            b1.Property<Guid>("Id")
                                .ValueGeneratedOnAdd();

                            b1.Property<Guid>("MeasureId");

                            b1.Property<string>("Name")
                                .IsRequired()
                                .HasColumnName("BodyPictureImageName")
                                .HasMaxLength(150);

                            b1.Property<string>("UrlPath")
                                .IsRequired()
                                .HasColumnName("BodyPictureImageUrlPath")
                                .HasMaxLength(500);

                            b1.HasKey("Id");

                            b1.HasIndex("MeasureId");

                            b1.ToTable("Measures_BodyPictures");

                            b1.HasOne("NutrientAuto.Community.Domain.Aggregates.MeasureAggregate.Measure")
                                .WithMany("BodyPictures")
                                .HasForeignKey("MeasureId")
                                .OnDelete(DeleteBehavior.Cascade);
                        });
                });

            modelBuilder.Entity("NutrientAuto.Community.Domain.Aggregates.PostAggregate.Post", b =>
                {
                    b.HasOne("NutrientAuto.Community.Domain.Aggregates.ProfileAggregate.Profile")
                        .WithMany()
                        .HasForeignKey("ProfileId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.OwnsOne("NutrientAuto.Community.Domain.Aggregates.PostAggregate.EntityReference", "EntityReference", b1 =>
                        {
                            b1.Property<Guid>("PostId");

                            b1.Property<bool>("HasReference")
                                .HasColumnName("HasEntityReference");

                            b1.Property<Guid?>("ReferenceId")
                                .HasColumnName("EntityReferenceId");

                            b1.Property<int?>("ReferenceType")
                                .HasColumnName("EntityReferenceType");

                            b1.HasKey("PostId");

                            b1.ToTable("Posts");

                            b1.HasOne("NutrientAuto.Community.Domain.Aggregates.PostAggregate.Post")
                                .WithOne("EntityReference")
                                .HasForeignKey("NutrientAuto.Community.Domain.Aggregates.PostAggregate.EntityReference", "PostId")
                                .OnDelete(DeleteBehavior.Cascade);
                        });

                    b.OwnsMany("NutrientAuto.Community.Domain.Aggregates.PostAggregate.PostLike", "Likes", b1 =>
                        {
                            b1.Property<Guid>("Id")
                                .ValueGeneratedOnAdd();

                            b1.Property<DateTime>("DateCreated");

                            b1.Property<Guid>("PostId");

                            b1.Property<Guid>("ProfileId");

                            b1.HasKey("Id");

                            b1.HasIndex("PostId");

                            b1.HasIndex("ProfileId");

                            b1.ToTable("PostLike");

                            b1.HasOne("NutrientAuto.Community.Domain.Aggregates.PostAggregate.Post")
                                .WithMany("Likes")
                                .HasForeignKey("PostId")
                                .OnDelete(DeleteBehavior.Cascade);

                            b1.HasOne("NutrientAuto.Community.Domain.Aggregates.ProfileAggregate.Profile")
                                .WithMany()
                                .HasForeignKey("ProfileId")
                                .OnDelete(DeleteBehavior.Cascade);
                        });

                    b.OwnsOne("NutrientAuto.Shared.ValueObjects.Image", "AttachedImage", b1 =>
                        {
                            b1.Property<Guid>("PostId");

                            b1.Property<string>("Name")
                                .IsRequired()
                                .HasColumnName("PostImageName")
                                .HasMaxLength(150);

                            b1.Property<string>("UrlPath")
                                .IsRequired()
                                .HasColumnName("PostImageUrlPath")
                                .HasMaxLength(500);

                            b1.HasKey("PostId");

                            b1.ToTable("Posts");

                            b1.HasOne("NutrientAuto.Community.Domain.Aggregates.PostAggregate.Post")
                                .WithOne("AttachedImage")
                                .HasForeignKey("NutrientAuto.Shared.ValueObjects.Image", "PostId")
                                .OnDelete(DeleteBehavior.Cascade);
                        });
                });

            modelBuilder.Entity("NutrientAuto.Community.Domain.Aggregates.ProfileAggregate.Profile", b =>
                {
                    b.OwnsMany("NutrientAuto.Community.Domain.Aggregates.ProfileAggregate.Friend", "Friends", b1 =>
                        {
                            b1.Property<Guid>("Id")
                                .ValueGeneratedOnAdd();

                            b1.Property<Guid>("FriendId");

                            b1.Property<Guid>("ProfileId");

                            b1.HasKey("Id");

                            b1.HasIndex("FriendId");

                            b1.HasIndex("ProfileId");

                            b1.ToTable("Friend");

                            b1.HasOne("NutrientAuto.Community.Domain.Aggregates.ProfileAggregate.Profile")
                                .WithMany()
                                .HasForeignKey("FriendId")
                                .OnDelete(DeleteBehavior.Cascade);

                            b1.HasOne("NutrientAuto.Community.Domain.Aggregates.ProfileAggregate.Profile")
                                .WithMany("Friends")
                                .HasForeignKey("ProfileId")
                                .OnDelete(DeleteBehavior.Cascade);
                        });

                    b.OwnsOne("NutrientAuto.Community.Domain.Aggregates.ProfileAggregate.ProfileSettings", "Settings", b1 =>
                        {
                            b1.Property<Guid>("ProfileId");

                            b1.Property<int>("PrivacyType")
                                .HasColumnName("PrivacyType");

                            b1.HasKey("ProfileId");

                            b1.ToTable("Profiles");

                            b1.HasOne("NutrientAuto.Community.Domain.Aggregates.ProfileAggregate.Profile")
                                .WithOne("Settings")
                                .HasForeignKey("NutrientAuto.Community.Domain.Aggregates.ProfileAggregate.ProfileSettings", "ProfileId")
                                .OnDelete(DeleteBehavior.Cascade);
                        });

                    b.OwnsOne("NutrientAuto.Shared.ValueObjects.EmailAddress", "EmailAddress", b1 =>
                        {
                            b1.Property<Guid>("ProfileId");

                            b1.Property<string>("Email")
                                .IsRequired()
                                .HasColumnName("EmailAddress")
                                .HasMaxLength(250);

                            b1.HasKey("ProfileId");

                            b1.ToTable("Profiles");

                            b1.HasOne("NutrientAuto.Community.Domain.Aggregates.ProfileAggregate.Profile")
                                .WithOne("EmailAddress")
                                .HasForeignKey("NutrientAuto.Shared.ValueObjects.EmailAddress", "ProfileId")
                                .OnDelete(DeleteBehavior.Cascade);
                        });

                    b.OwnsOne("NutrientAuto.Shared.ValueObjects.Image", "AvatarImage", b1 =>
                        {
                            b1.Property<Guid>("ProfileId");

                            b1.Property<string>("Name")
                                .IsRequired()
                                .HasColumnName("AvatarImageName")
                                .HasMaxLength(150);

                            b1.Property<string>("UrlPath")
                                .IsRequired()
                                .HasColumnName("AvatarImageUrlPath")
                                .HasMaxLength(500);

                            b1.HasKey("ProfileId");

                            b1.ToTable("Profiles");

                            b1.HasOne("NutrientAuto.Community.Domain.Aggregates.ProfileAggregate.Profile")
                                .WithOne("AvatarImage")
                                .HasForeignKey("NutrientAuto.Shared.ValueObjects.Image", "ProfileId")
                                .OnDelete(DeleteBehavior.Cascade);
                        });
                });

            modelBuilder.Entity("NutrientAuto.Community.Domain.Aggregates.ReminderAggregate.Reminder", b =>
                {
                    b.HasOne("NutrientAuto.Community.Domain.Aggregates.ProfileAggregate.Profile")
                        .WithMany()
                        .HasForeignKey("ProfileId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.OwnsOne("NutrientAuto.Shared.ValueObjects.Time", "TimeOfDay", b1 =>
                        {
                            b1.Property<Guid>("ReminderId");

                            b1.Property<int>("Hour");

                            b1.Property<int>("Minute");

                            b1.Property<int>("Second");

                            b1.HasKey("ReminderId");

                            b1.ToTable("Reminders");

                            b1.HasOne("NutrientAuto.Community.Domain.Aggregates.ReminderAggregate.Reminder")
                                .WithOne("TimeOfDay")
                                .HasForeignKey("NutrientAuto.Shared.ValueObjects.Time", "ReminderId")
                                .OnDelete(DeleteBehavior.Cascade);
                        });
                });

            modelBuilder.Entity("NutrientAuto.Community.Domain.Aggregates.FoodAggregate.CustomFood", b =>
                {
                    b.HasOne("NutrientAuto.Community.Domain.Aggregates.ProfileAggregate.Profile")
                        .WithMany()
                        .HasForeignKey("ProfileId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("NutrientAuto.Community.Domain.Aggregates.FoodTableAggregate.CustomFoodTable", b =>
                {
                    b.HasOne("NutrientAuto.Community.Domain.Aggregates.ProfileAggregate.Profile")
                        .WithMany()
                        .HasForeignKey("ProfileId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("NutrientAuto.Community.Domain.Aggregates.MeasureCategoryAggregate.CustomMeasureCategory", b =>
                {
                    b.HasOne("NutrientAuto.Community.Domain.Aggregates.ProfileAggregate.Profile")
                        .WithMany()
                        .HasForeignKey("ProfileId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
